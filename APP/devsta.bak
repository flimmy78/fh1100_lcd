/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.32                          *
*        Compiled Oct  8 2015, 11:59:02                              *
*        (c) 2015 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END

#include "Mainmenu.h"
#include "sys.h"
extern u8 ALA_POINT[30][40];
/*********************************************************************
*
*       Defines
*
**********************************************************************
*/







#define ID_WINDOW_0 (GUI_ID_USER + 0x00)
#define ID_MULTIPAGE_0 (GUI_ID_USER + 0x01)
#define ID_TEXT_0 (GUI_ID_USER + 0x02)


#define ID_WINDOW_01 (GUI_ID_USER + 0x03)

#define ID_TEXT_01 (GUI_ID_USER + 0x04)
#define ID_TEXT_02 (GUI_ID_USER + 0x05)
#define ID_TEXT_03 (GUI_ID_USER + 0x06)
#define ID_TEXT_04 (GUI_ID_USER + 0x07)
/*********************************************************************
*
*       电源状态
*
**********************************************************************
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreatePage1[] = 
{
	{ WINDOW_CreateIndirect, "Window", ID_WINDOW_0, 4, 60, 792, 400, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "", ID_TEXT_01, DefaultXpos+50, DefaultYpos+10, 700, DefaultGaps*15, 0, 0x64, 0 },
};

//static const GUI_WIDGET_CREATE_INFO _aDialogCreatePage2[] = 
//{
//	{ WINDOW_CreateIndirect, "Window", ID_WINDOW_0, 50, 150, 750, 400, 0, 0x0, 0 },
//	{ TEXT_CreateIndirect, "", ID_TEXT_01, DefaultXpos, DefaultYpos, 600, DefaultGaps*10, 0, 0x64, 0 },
//};

static void _cbDialogPage1(WM_MESSAGE * pMsg) 
{
	GUI_RECT  Rect;
	switch (pMsg->MsgId) 
	{
		case WM_PAINT:
			WM_GetClientRect(&Rect);
		  GUI_SetBkColor(GUI_WHITE); //红色背景色
      GUI_ClearRectEx(&Rect);    //清除 Rect 区域,既绘制红色区域
			
			{
				char tbuf[40]={0};
				uint8_t i=0;
				u16 offset1=T0_OFFSET;   
				DEV_STA STA_PW1		=		(DEV_STA)((CAN1_RX0_BUF[offset1]&0x80)>>7);			//电源1状态	
				DEV_STA STA_PW2		=		(DEV_STA)((CAN1_RX0_BUF[offset1]&0x40)>>6);			//电源2状态		

				if(STA_PW1==STA_OK)
					i  = sprintf( tbuf,"%s\n\n", "电源模块1状态: 正常" );
				else
					i  = sprintf( tbuf,"%s\n\n", "电源模块1状态: 异常" );
				if(STA_PW2==STA_OK)
					i += sprintf( tbuf + i, "%s", "电源模块2状态: 正常" ); 
				else
				  i += sprintf( tbuf + i, "%s", "电源模块2状态: 异常" ); 
				TEXT_SetFont(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01), &GUI_FontHZ32);
				TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01),(const char *)tbuf);
				
			}
			break;	
		default:
			WM_DefaultProc(pMsg);
			break;
	}
}

static void _cbDialogPage2(WM_MESSAGE * pMsg) 
{

	GUI_RECT  Rect;
	switch (pMsg->MsgId) 
	{
		case WM_PAINT:
		  WM_GetClientRect(&Rect);
		  GUI_SetBkColor(GUI_WHITE); //红色背景色
      GUI_ClearRectEx(&Rect);    //清除 Rect 区域,既绘制红色区域
			{
				char tbuf[100]={0};
				uint8_t i=0;
				DEV_STA 	osc_tame_sta,ox_synch_sta;
				u16 	offset1=T0_OFFSET+16;   
				
				u32 	osc_frequency		=		(CAN1_RX0_BUF[offset1+1]<<24)+(CAN1_RX0_BUF[offset1+2]<<16)+(CAN1_RX0_BUF[offset1+3]<<8)
																+(CAN1_RX0_BUF[offset1+4]);					//频率值
				u32 	osc_adjust			=		(CAN1_RX0_BUF[offset1+5]<<16)+(CAN1_RX0_BUF[offset1+6]<<8)
																+(CAN1_RX0_BUF[offset1+7]);					//频率估算
				u16 	offset2=T0_OFFSET+16; 
				u8  	ox_synch_on   	=   (CAN1_RX0_BUF[offset2]&0x01);				//原子钟锁定状态
				
				osc_tame_sta				=		(DEV_STA)	((CAN1_RX0_BUF[T0_OFFSET]&0x20)>>5);				//频率源驯服状态	
				ox_synch_sta				=		(DEV_STA)(CAN1_RX0_BUF[offset2]&0x02);				//原子钟锁定状态
				if(osc_frequency>99999999)   	//超出范围
					osc_frequency=99999999;
				if(osc_frequency>99999999)			//超出范围
					osc_adjust=99999999;

				if(osc_tame_sta==STA_OK)
					i  = sprintf( tbuf + i,"%s\n", "频率源状态: 驯服" );
				else
					i  = sprintf( tbuf + i,"%s\n", "频率源状态: 未驯服" );
				
				if(DevSys.USER_Right == 1)
				{
					i += sprintf( tbuf + i, "频率值  : %dHz\n",osc_frequency); 
			
					 i += sprintf( tbuf + i,"频率估算: %dHz\n",osc_adjust);
					
					if(ox_synch_on==0)
						{
							if(ox_synch_sta==STA_OK)
								 i += sprintf( tbuf + i,"%s","原子钟状态: 已锁定");
							else
								i += sprintf( tbuf + i,"%s","原子钟状态: 未锁定");
						}			
				}		
			
				TEXT_SetFont(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01), &GUI_FontHZ32);
				TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01),tbuf);
			}
			break;	
		default:
			WM_DefaultProc(pMsg);
			break;
	}
}

static void _cbDialogPage3(WM_MESSAGE * pMsg) 
{
	GUI_RECT  Rect;
	switch (pMsg->MsgId) 
	{
		case WM_PAINT:
		 WM_GetClientRect(&Rect);
		  GUI_SetBkColor(GUI_WHITE); //红色背景色
      GUI_ClearRectEx(&Rect);    //清除 Rect 区域,既绘制红色区域
		{		
			
	uint8_t nosounce =0;		
	uint8_t  ALAMSG[30]={0},j,temp;	
  uint16_t 	i;
	vu8 line = 0;
	char tbuf[800]={0};
	u8 	devfault					=		(CAN1_RX0_BUF[T0_OFFSET+1])|DevHead.cpufalt;		//并上了CPU核心状态
	u8 	devala						=		(CAN1_RX0_BUF[T0_OFFSET+2]);
	
	u8	bds_time_valid,gps_time_valid;
	u8  bdc1_sta_signal,bdc1_time_valid;
	u8  bdc2_sta_signal,bdc2_time_valid;
	
	u8 STA_PW1						=		(DEV_STA)((CAN1_RX0_BUF[T0_OFFSET]&0x80)>>7);			//电源1状态	
	u8 STA_PW2						=		(DEV_STA)((CAN1_RX0_BUF[T0_OFFSET]&0x40)>>6);			//电源2状态	
	
	bds_time_valid				=		(DEV_STA)((CAN1_RX0_BUF[T1_OFFSET+4]&0x04)>>2);					//北斗源时间连续状态 
	gps_time_valid				=		(DEV_STA)((CAN1_RX0_BUF[T2_OFFSET+4]&0x04)>>2);					//GPS源时间连续状态

	bdc1_sta_signal				=		(DEV_STA)(CAN1_RX0_BUF[T3_OFFSET+2]&0x01);							//BDC1源信号状态
	bdc1_time_valid				=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+2]&0x04)>>2);					//BDC1源时间连续状态 
	
	bdc2_sta_signal				=		(DEV_STA)(CAN1_RX0_BUF[T3_OFFSET+5]&0x01);								//bdc2源信号状态
	bdc2_time_valid				=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+5]&0x04)>>2);						//bdc2源时间连续状态 	
//{"北斗卫星接收模块状态异常"},		//1  故障B7
//{"GPS卫星接收模块状态异常"},		//2	 故障B6																						
//{"北斗天线故障"},							//3  故障B5
//{"GPS天线故障"},								//4  故障B4
//{"CPU等核心板状态异常"},				//5  故障B3
//{"晶振驯服状态异常"},					//6  故障B2
//{"所有独立时源均不可用(首次同步,>30分钟)"},		//7 故障B1																
//{"所有独立时源均不可用(曾经同步,>24小时)"},		//8 故障B0

	if(devfault>0)	//故障灯控制
	{		
		if(devfault&0x80)	{ALAMSG[line]=1;	line++;}	
		if(devfault&0x40)	{ALAMSG[line]=2;	line++;}  
		if(devfault&0x20)	{ALAMSG[line]=3;  line++;}		
		if(devfault&0x10)	{ALAMSG[line]=4;  line++;}											
		if(devfault&0x08)	{ALAMSG[line]=5;  line++;}															
		if(devfault&0x04)	{ALAMSG[line]=6;  line++;}													
		if((devfault&0x02)&&(nosounce==0))	{nosounce = 1;ALAMSG[line]=7;	line++;}								
		if((devfault&0x01)&&(nosounce==0))	{nosounce = 1;ALAMSG[line]=8;	line++;}		
	}
		
		if(devala>0)
	{
		
		if(devala&0x80)																	//告警B7				
			{
				if(STA_PW1)	{ALAMSG[line]=10;line++;} 			//告警电源失电: 电源1
				if(STA_PW2)	{ALAMSG[line]=11;line++;}				//电源失电: 电源2
			}	
		if(devala&0x40)	{ALAMSG[line]=12;line++;}	//告警B6 	北斗卫星失锁
		if(devala&0x20)	{ALAMSG[line]=13;line++;}	//告警B5 	GPS 卫星失锁
		if(devala&0x10)	{ALAMSG[line]=14;line++;}	//告警B4  IRIG-B码输入质量低于本机							
			
		if(devala&0x08)
			{
				//{ALAMSG[line]=15;line++;}											//15 告警B3.(1+2+3+4)				时间连续性异常
				if(bds_time_valid)	{ALAMSG[line]=16;line++;}		//时间连续性异常: 北斗
				if(gps_time_valid)	{ALAMSG[line]=17;line++;}		//时间连续性异常:GPS
				if(bdc1_time_valid)	{ALAMSG[line]=19;line++;}		//时间连续性异常:IRIG-B1
				if(bdc2_time_valid)	{ALAMSG[line]=19;line++;}		//时间连续性异常:IRIG-B2
			}

		if(devala&0x04)	
			{
				//{ALAMSG[line]=20;line++;}											//20 告警B2.(1+2+3+4)				任意一路时间源不可用
				if(devala&0x40)			{ALAMSG[line]=21;line++;}		//时间源不可用: 北斗
				if(devala&0x20)			{ALAMSG[line]=22;line++;}		//时间源不可用:GPS
				if(bdc1_sta_signal)	{ALAMSG[line]=23;line++;}		//时间源不可用:IRIG-B1
				if(bdc2_sta_signal)	{ALAMSG[line]=24;line++;}		//时间源不可用:IRIG-B2
			}
		if((devala&0x02)&&(nosounce==0))	{nosounce = 1;ALAMSG[line]=26;line++;}						//26 告警B1 所有独立时源均不可用(首次同步,<30分钟) 
		if((devala&0x01)&&(nosounce==0))	{nosounce = 1;ALAMSG[line]=27;line++;}						//27 告警B0 所有独立时源均不可用(曾经同步,<24小时) 
	}		
	
		i=0;
  if(line==0)
		{
			
			
			sprintf((char*)tbuf,"%s","无告警信息");
		
		}
	else if(line<13)
	 {
		  
			for(j=0;j<line;j++)	//j+1,本窗口的条数
			{
				temp=ALAMSG[j];										//读取条目号
				i += sprintf( (char*)(tbuf + i),"%02d.%s\n",j+1,(char *)&(ALA_POINT[temp][0]));
				
			}
			TEXT_SetFont(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01), &GUI_FontHZ32);		
		}
	else  
			{
				for(j=0;j<20;j++)	//最多20条
				{
					temp=ALAMSG[j];		
					i += sprintf( (char*)(tbuf + i),"%02d.%s\n",j+1,(char *)&(ALA_POINT[temp][0]));
				}
				TEXT_SetFont(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01), &GUI_FontHZ24);	
        //TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01),tbuf);	
			}
			
	TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01),tbuf);	
			
	
   }
			break;	
		default:
			WM_DefaultProc(pMsg);
			break;
	}
}



static void _cbDialogPage4(WM_MESSAGE * pMsg) 
{
	GUI_RECT  Rect;
	switch (pMsg->MsgId) 
	{
		case WM_PAINT:
		  WM_GetClientRect(&Rect);
		  GUI_SetBkColor(GUI_WHITE); //红色背景色
      GUI_ClearRectEx(&Rect);    //清除 Rect 区域,既绘制红色区域
			{
				char tbuf[400]={0};
				uint16_t i=0;
	DEV_STA	 		bds_sta_synch,bds_sta_module,bds_dif_sign,bds_sta_signal,bds_LS_come,bds_LS_sign;
	u8    	bds_sta_ant;
	u8 			bds_num_capture,bds_time_valid;
	u32 		bds_dif_s,bds_dif_ns;
	//u32 		bds_dif_s,bds_dif_ns,bds_latitude_i,bds_latitude_d,bds_longitude_i,bds_longitude_d,bds_high;			
	//u16 		offset2,offset3,offset4;
	

	

	bds_sta_signal				=		(DEV_STA)(CAN1_RX0_BUF[T1_OFFSET+4]&0x01);							//北斗源信号状态	
	bds_sta_synch					=		(DEV_STA)((CAN1_RX0_BUF[T1_OFFSET+4]&0x02)>>1);					//北斗源同步状态	
	bds_time_valid				=		(DEV_STA)((CAN1_RX0_BUF[T1_OFFSET+4]&0x04)>>2);					//北斗源时间连续状态 
	bds_sta_module				=		(DEV_STA)((CAN1_RX0_BUF[T1_OFFSET+3]&0x10)>>3);					//北斗源模块状态
	bds_sta_ant						=		CAN1_RX0_BUF[T1_OFFSET+3]&0xf;													//北斗源天线状态
	bds_num_capture				=		(CAN1_RX0_BUF[T1_OFFSET+2]&0xf0)>>4;										//北斗源卫星捕获数量
	//offset2=BDS_STA_OFFSET+32;	
	bds_dif_sign					=		(DEV_STA)((CAN1_RX0_BUF[BDS_STA_OFFSET+32]&0x80)>>7);	//北斗源PPS相对差符号
  bds_dif_s							=		((CAN1_RX0_BUF[BDS_STA_OFFSET+32]&0x7f)<<24)+(CAN1_RX0_BUF[BDS_STA_OFFSET+32+1]<<16)+(CAN1_RX0_BUF[BDS_STA_OFFSET+32+2]<<8)
														+(CAN1_RX0_BUF[BDS_STA_OFFSET+32+3]);									//北斗源PPS相对差值秒位
	bds_dif_ns						=		((CAN1_RX0_BUF[BDS_STA_OFFSET+32+4]<<24)+(CAN1_RX0_BUF[BDS_STA_OFFSET+32+5]<<16)+(CAN1_RX0_BUF[BDS_STA_OFFSET+32+6]<<8)
														+(CAN1_RX0_BUF[BDS_STA_OFFSET+32+7]))*20;									//北斗源PPS相对差值纳秒位
	if(bds_dif_ns>999999999) bds_dif_ns=999999999;												//溢出值置999 999 999
	
	
	//offset3=T1_OFFSET+1;
	bds_LS_come						=		(DEV_STA)((CAN1_RX0_BUF[T1_OFFSET+1]&0x80)>>7);		//闰秒预告
	bds_LS_sign						=		(DEV_STA)((CAN1_RX0_BUF[T1_OFFSET+1]&0x40)>>6);		//闰秒标志
	
	//offset4=T1_OFFSET+8;
//	bds_latitude_i				=		(CAN1_RX0_BUF[T1_OFFSET+8+9]<<16)+(CAN1_RX0_BUF[T1_OFFSET+8+10]<<8)	//纬度
//														+(CAN1_RX0_BUF[T1_OFFSET+8+11]);	
//	bds_latitude_d				=		(CAN1_RX0_BUF[T1_OFFSET+8+13]<<16)+(CAN1_RX0_BUF[T1_OFFSET+8+14]<<8)
//														+(CAN1_RX0_BUF[T1_OFFSET+8+15]);														
//	bds_longitude_i				=		(CAN1_RX0_BUF[T1_OFFSET+8+1]<<16)+(CAN1_RX0_BUF[T1_OFFSET+8+2]<<8)	//经度
//														+(CAN1_RX0_BUF[T1_OFFSET+8+3]);	
//	bds_longitude_d				=		(CAN1_RX0_BUF[T1_OFFSET+8+5]<<16)+(CAN1_RX0_BUF[T1_OFFSET+8+6]<<8)
//														+(CAN1_RX0_BUF[T1_OFFSET+8+7]);
//	bds_high							=		(CAN1_RX0_BUF[T1_OFFSET+8+22]<<8)+(CAN1_RX0_BUF[T1_OFFSET+8+23]);		//高度	
	
	  TEXT_SetFont(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01), &GUI_FontHZ32);
		if(bds_sta_synch==STA_OK)
			i += sprintf( (char*)(tbuf + i),"%s\n","北斗同步状态: 同步");
		else 
			i += sprintf( (char*)(tbuf + i),"%s\n","北斗同步状态: 失步");
				/*
		-------------------------0天线状态-----------------------------------------------------------------------------*/
		if(bds_sta_ant==Ant_OK)	
			i += sprintf( (char*)(tbuf + i),"%s\n","北斗天线状态: 正常");
		else if(bds_sta_ant==Ant_SHORT)	
			i += sprintf( (char*)(tbuf + i),"%s\n","北斗天线状态: 短路");
		else 
			i += sprintf( (char*)(tbuf + i),"%s\n","北斗天线状态: 开路");
				/*
		-------------------------1模块状态-----------------------------------------------------------------------------*/
		if(bds_sta_module==STA_OK)	
			i += sprintf( (char*)(tbuf + i),"%s\n","北斗模块状态：正常");
		else 
		  i += sprintf( (char*)(tbuf + i),"%s\n","北斗模块状态：异常");
		/*
		-------------------------1信号状态-----------------------------------------------------------------------------*/
		if(bds_sta_signal==STA_OK)	
			i += sprintf( (char*)(tbuf + i),"%s\n","北斗信号状态：正常");
		else 
			i += sprintf( (char*)(tbuf + i),"%s\n","北斗信号状态：异常");
			/*
		-------------------------2卫星颗数-----------------------------------------------------------------------------*/
		i += sprintf( (char*)(tbuf + i),"北斗卫星颗数: %02d颗\n",bds_num_capture);
		
		/*
		-------------------------3通道差值-----------------------------------------------------------------------------*/
		if(bds_dif_sign==STA_OK)		
			i += sprintf( (char*)(tbuf + i),"北斗通道差值: +%d秒%03d纳秒\n",bds_dif_s,bds_dif_ns);
		else
			i += sprintf( (char*)(tbuf + i),"北斗通道差值: -%d秒%03d纳秒\n",bds_dif_s,bds_dif_ns);
			/*
		-------------------------0闰秒状态-----------------------------------------------------------------------------*/
		i += sprintf( (char*)(tbuf + i),"闰秒预告: %02d\n闰秒标志: %02d\n",bds_LS_come,bds_LS_sign);	
			/*
		-------------------------1时间连续性状态-----------------------------------------------------------------------------*/
		if(bds_time_valid==STA_OK)	
		 i += sprintf( (char*)(tbuf + i),"%s\n","时间连续性状态：正常");
		else
			i += sprintf( (char*)(tbuf + i),"%s\n","时间连续性状态：异常");
		
//		if(DevSys.USER_Right == 1)
//				{
//			/*
//		-------------------------2经纬度状态-----------------------------------------------------------------------------*/	
//		 i += sprintf( (char*)(tbuf + i),"定位: N%02d.%05dN,E%02d.%05d\n",bds_latitude_i,bds_latitude_d,bds_longitude_i,bds_longitude_d);		
//			/*
//		-------------------------3高度状态-----------------------------------------------------------------------------*/	
//		 i += sprintf( (char*)(tbuf + i),"高度: %03d米",bds_high);
//					TEXT_SetFont(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01), &GUI_FontHZ24);
//		    }
				
				TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01),tbuf);
			}
			break;	
		default:
			WM_DefaultProc(pMsg);
			break;
	}
}



static void _cbDialogPage5(WM_MESSAGE * pMsg) 
{
	GUI_RECT  Rect;
	switch (pMsg->MsgId) 
	{
		case WM_PAINT:
		  WM_GetClientRect(&Rect);
		  GUI_SetBkColor(GUI_WHITE); //红色背景色
      GUI_ClearRectEx(&Rect);    //清除 Rect 区域,既绘制红色区域
			{
				char tbuf[400]={0};
				uint16_t i=0;
	DEV_STA	 			gps_sta_synch,gps_sta_module,gps_dif_sign,gps_sta_signal,gps_LS_come,gps_LS_sign,gps_time_valid;
	enum Ant_DEV_STA		gps_sta_ant;
	u8 			gps_num_capture;
	u32 		gps_dif_s,gps_dif_ns;
	//u32 		gps_dif_s,gps_dif_ns,gps_latitude_i,gps_latitude_d,gps_longitude_i,gps_longitude_d,gps_high;			
	//u16 		offset2,offset3,offset4;
	
	//offset1=T2_OFFSET;
	gps_sta_signal				=		(DEV_STA)(CAN1_RX0_BUF[T2_OFFSET+4]&0x01);							//GPS源信号状态	
	gps_sta_synch					=		(DEV_STA)((CAN1_RX0_BUF[T2_OFFSET+4]&0x02)>>1);					//GPS源同步状态
	gps_time_valid				=		(DEV_STA)((CAN1_RX0_BUF[T2_OFFSET+4]&0x04)>>2);					//GPS源时间连续状态
	gps_sta_module				=		(DEV_STA)((CAN1_RX0_BUF[T2_OFFSET+3]&0x10)>>3);					//GPS源模块状态
	gps_num_capture				=		(CAN1_RX0_BUF[T2_OFFSET+2]&0xf0)>>4;											//GPS源卫星捕获数量
	gps_sta_ant						=		(enum Ant_DEV_STA)(CAN1_RX0_BUF[T2_OFFSET+3]&0xf);			//GPS源天线状态
	//offset2=T2_OFFSET+32;	
	gps_dif_sign					=		(DEV_STA)((CAN1_RX0_BUF[T2_OFFSET+32]&0x80)>>7);	//GPS源PPS相对差符号
  gps_dif_s							=		((CAN1_RX0_BUF[T2_OFFSET+32]&0x7f)<<24)+(CAN1_RX0_BUF[T2_OFFSET+32+1]<<16)+(CAN1_RX0_BUF[T2_OFFSET+32+2]<<8)
														+(CAN1_RX0_BUF[T2_OFFSET+32+3]);									//GPS源PPS相对差值秒位
	gps_dif_ns						=		((CAN1_RX0_BUF[T2_OFFSET+32+4]<<24)+(CAN1_RX0_BUF[T2_OFFSET+32+5]<<16)+(CAN1_RX0_BUF[T2_OFFSET+32+6]<<8)
														+(CAN1_RX0_BUF[T2_OFFSET+32+7]))*20;									//GPS源PPS相对差值纳秒位
	if(gps_dif_ns>999999999) gps_dif_ns=999999999;												//溢出值置999 999 999
	
	
	//offset3=T2_OFFSET+1;
	gps_LS_come						=		(DEV_STA)((CAN1_RX0_BUF[T2_OFFSET+1]&0x80)>>7);		//闰秒预告
	gps_LS_sign						=		(DEV_STA)((CAN1_RX0_BUF[T2_OFFSET+1]&0x40)>>6);		//闰秒标志
	
	//offset4=T2_OFFSET+8;
//	gps_latitude_i				=		(CAN1_RX0_BUF[T2_OFFSET+8+9]<<16)+(CAN1_RX0_BUF[T2_OFFSET+8+10]<<8)	//纬度
//														+(CAN1_RX0_BUF[T2_OFFSET+8+11]);	
//	gps_latitude_d				=		(CAN1_RX0_BUF[T2_OFFSET+8+13]<<16)+(CAN1_RX0_BUF[T2_OFFSET+8+14]<<8)
//														+(CAN1_RX0_BUF[T2_OFFSET+8+15]);														
//	gps_longitude_i				=		(CAN1_RX0_BUF[T2_OFFSET+8+1]<<16)+(CAN1_RX0_BUF[T2_OFFSET+8+2]<<8)	//经度
//														+(CAN1_RX0_BUF[T2_OFFSET+8+3]);	
//	gps_longitude_d				=		(CAN1_RX0_BUF[T2_OFFSET+8+5]<<16)+(CAN1_RX0_BUF[T2_OFFSET+8+6]<<8)
//														+(CAN1_RX0_BUF[T2_OFFSET+8+7]);
//	gps_high							=		(CAN1_RX0_BUF[T2_OFFSET+8+22]<<8)+(CAN1_RX0_BUF[T2_OFFSET+8+23]);		//高度		

	  TEXT_SetFont(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01), &GUI_FontHZ32);
		if(gps_sta_synch==STA_OK)
			i += sprintf( (char*)(tbuf + i),"%s\n","GPS同步状态: 同步");
		else 
			i += sprintf( (char*)(tbuf + i),"%s\n","GPS同步状态: 失步");
				/*
		-------------------------0天线状态-----------------------------------------------------------------------------*/
		if(gps_sta_ant==Ant_OK)	
			i += sprintf( (char*)(tbuf + i),"%s\n","GPS天线状态: 正常");
		else if(gps_sta_ant==Ant_SHORT)	
			i += sprintf( (char*)(tbuf + i),"%s\n","GPS天线状态: 短路");
		else 
			i += sprintf( (char*)(tbuf + i),"%s\n","GPS天线状态: 开路");
				/*
		-------------------------1模块状态-----------------------------------------------------------------------------*/
		if(gps_sta_module==STA_OK)	
			i += sprintf( (char*)(tbuf + i),"%s\n","GPS模块状态：正常");
		else 
		  i += sprintf( (char*)(tbuf + i),"%s\n","GPS模块状态：异常");
		/*
		-------------------------1信号状态-----------------------------------------------------------------------------*/
		if(gps_sta_signal==STA_OK)	
			i += sprintf( (char*)(tbuf + i),"%s\n","GPS信号状态：正常");
		else 
			i += sprintf( (char*)(tbuf + i),"%s\n","GPS信号状态：异常");
			/*
		-------------------------2卫星颗数-----------------------------------------------------------------------------*/
		i += sprintf( (char*)(tbuf + i),"GPS卫星颗数: %02d颗\n",gps_num_capture);
		
		/*
		-------------------------3通道差值-----------------------------------------------------------------------------*/
		if(gps_dif_sign==STA_OK)		
			i += sprintf( (char*)(tbuf + i),"GPS通道差值: +%d秒%03d纳秒\n",gps_dif_s,gps_dif_ns);
		else
			i += sprintf( (char*)(tbuf + i),"GPS通道差值: -%d秒%03d纳秒\n",gps_dif_s,gps_dif_ns);
			/*
		-------------------------0闰秒状态-----------------------------------------------------------------------------*/
		i += sprintf( (char*)(tbuf + i),"闰秒预告: %02d\n闰秒标志: %02d\n",gps_LS_come,gps_LS_sign);	
			/*
		-------------------------1时间连续性状态-----------------------------------------------------------------------------*/
		if(gps_time_valid==STA_OK)	
		 i += sprintf( (char*)(tbuf + i),"%s\n","时间连续性状态：正常");
		else
			i += sprintf( (char*)(tbuf + i),"%s\n","时间连续性状态：异常");
		
//		if(DevSys.USER_Right == 1)
//				{
//			/*
//		-------------------------2经纬度状态-----------------------------------------------------------------------------*/	
//		 i += sprintf( (char*)(tbuf + i),"定位: N%02d.%05dN,E%02d.%05d\n",gps_latitude_i,gps_latitude_d,gps_longitude_i,gps_longitude_d);		
//			/*
//		-------------------------3高度状态-----------------------------------------------------------------------------*/	
//		 i += sprintf( (char*)(tbuf + i),"高度: %03d米",gps_high);
//					TEXT_SetFont(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01), &GUI_FontHZ24);
//		    }
				
				TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01),tbuf);
			}
			break;	
		default:
			WM_DefaultProc(pMsg);
			break;
	}
}


static void _cbDialogPage6(WM_MESSAGE * pMsg) 
{
	GUI_RECT  Rect;
	switch (pMsg->MsgId) 
	{
		case WM_PAINT:
		  WM_GetClientRect(&Rect);
		  GUI_SetBkColor(GUI_WHITE); //红色背景色
      GUI_ClearRectEx(&Rect);    //清除 Rect 区域,既绘制红色区域
			{
				char tbuf[400]={0};
				uint16_t i=0;
		DEV_STA	 bdc1_sta_synch,bdc1_sta_signal,bdc1_dif_sign,bdc1_time_valid,bdc1_LS_come,bdc1_LS_sign;
	//u8 			bdc1_num_qua;
	u32 		bdc1_dif_s,bdc1_dif_ns;

	bdc1_sta_synch				=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+2]&0x02)>>1);					//BDC1源同步状态	
	bdc1_sta_signal				=		(DEV_STA)(CAN1_RX0_BUF[T3_OFFSET+2]&0x01);							//BDC1源信号状态
	bdc1_time_valid				=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+2]&0x04)>>2);					//BDC1源时间连续状态 
	//bdc1_num_qua					=		(CAN1_RX0_BUF[T3_OFFSET+1]&0xf);														//BDC1源时间质量位
	bdc1_dif_sign					=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+8]&0x80)>>7);								//BDC1源PPS相对差符号
  bdc1_dif_s						=		((CAN1_RX0_BUF[T3_OFFSET+8]&0x7f)<<24)+(CAN1_RX0_BUF[T3_OFFSET+8+1]<<16)+(CAN1_RX0_BUF[T3_OFFSET+8+2]<<8)
														+(CAN1_RX0_BUF[T3_OFFSET+8+3]);																//BDC1源PPS相对差值秒位
	bdc1_dif_ns						=		((CAN1_RX0_BUF[T3_OFFSET+8+4]<<24)+(CAN1_RX0_BUF[T3_OFFSET+8+5]<<16)+(CAN1_RX0_BUF[T3_OFFSET+8+6]<<8)
														+(CAN1_RX0_BUF[T3_OFFSET+8+7]))*20;																//BDC1源PPS相对差值纳秒位
	if(bdc1_dif_ns>999999999) bdc1_dif_ns=999999999;																		//溢出值置999 999 999
	
	
	bdc1_LS_come					=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+1]&0x80)>>7);		//闰秒预告
	bdc1_LS_sign					=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+1]&0x40)>>6);		//闰秒标志
	
		if(bdc1_sta_synch==STA_OK)
			i += sprintf( (char*)(tbuf + i),"%s\n","IRIG-B1同步状态: 同步");
		else 
			i += sprintf( (char*)(tbuf + i),"%s\n","IRIG-B1同步状态: 失步");
			/*
		-------------------------1信号状态-----------------------------------------------------------------------------*/
		if(bdc1_sta_signal==STA_OK)	
			i += sprintf( (char*)(tbuf + i),"%s\n","IRIG-B1信号状态：正常");
		else 
			i += sprintf( (char*)(tbuf + i),"%s\n","IRIG-B1信号状态：异常");
		
		/*
		-------------------------3通道差值-----------------------------------------------------------------------------*/
		if(bdc1_dif_sign==STA_OK)		
			i += sprintf( (char*)(tbuf + i),"IRIG-B1通道差值: +%d秒%03d纳秒\n",bdc1_dif_s,bdc1_dif_ns);
		else
			i += sprintf( (char*)(tbuf + i),"IRIG-B1通道差值: -%d秒%03d纳秒\n",bdc1_dif_s,bdc1_dif_ns);
			/*
		-------------------------0闰秒状态-----------------------------------------------------------------------------*/
		i += sprintf( (char*)(tbuf + i),"闰秒预告: %02d\n闰秒标志: %02d\n",bdc1_LS_come,bdc1_LS_sign);	
			/*
		-------------------------1时间连续性状态-----------------------------------------------------------------------------*/
		if(bdc1_time_valid==STA_OK)	
		 i += sprintf( (char*)(tbuf + i),"%s\n","时间连续性状态：正常");
		else
			i += sprintf( (char*)(tbuf + i),"%s\n","时间连续性状态：异常");
		TEXT_SetFont(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01), &GUI_FontHZ32);
		TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01),tbuf);
			}
			break;	
		default:
			WM_DefaultProc(pMsg);
			break;
	}
}

static void _cbDialogPage7(WM_MESSAGE * pMsg) 
{
	GUI_RECT  Rect;
	switch (pMsg->MsgId) 
	{
		case WM_PAINT:
		  WM_GetClientRect(&Rect);
		  GUI_SetBkColor(GUI_WHITE); //红色背景色
      GUI_ClearRectEx(&Rect);    //清除 Rect 区域,既绘制红色区域
			{
				char tbuf[400]={0};
				uint16_t i=0;
	DEV_STA	 bdc2_sta_synch,bdc2_sta_signal,bdc2_dif_sign,bdc2_time_valid,bdc2_LS_come,bdc2_LS_sign;
	//u8 			bdc2_num_qua;
	u32 		bdc2_dif_s,bdc2_dif_ns;			
	//offset2=T3_OFFSET+16;	
	bdc2_sta_synch				=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+5]&0x02)>>1);						//bdc2源同步状态	
	bdc2_sta_signal				=		(DEV_STA)(CAN1_RX0_BUF[T3_OFFSET+5]&0x01);								//bdc2源信号状态
	bdc2_time_valid				=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+5]&0x04)>>2);						//bdc2源时间连续状态 
	
	//bdc2_num_qua					=		(CAN1_RX0_BUF[T3_OFFSET+4]&0xf);														//bdc2源时间质量位
	bdc2_dif_sign					=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+16]&0x80)>>7);							//bdc2源PPS相对差符号
  bdc2_dif_s						=		((CAN1_RX0_BUF[T3_OFFSET+16]&0x7f)<<24)+(CAN1_RX0_BUF[T3_OFFSET+16+1]<<16)+(CAN1_RX0_BUF[T3_OFFSET+16+2]<<8)
														+(CAN1_RX0_BUF[T3_OFFSET+16+3]);																//bdc2源PPS相对差值秒位
	bdc2_dif_ns						=		((CAN1_RX0_BUF[T3_OFFSET+16+4]<<24)+(CAN1_RX0_BUF[T3_OFFSET+16+5]<<16)+(CAN1_RX0_BUF[T3_OFFSET+16+6]<<8)
														+(CAN1_RX0_BUF[T3_OFFSET+16+7]))*20;														//bdc2源PPS相对差值纳秒位
	if(bdc2_dif_ns>999999999) bdc2_dif_ns=999999999;																		//溢出值置999 999 999
	
	
	bdc2_LS_come					=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+1]&0x80)>>7);		//闰秒预告
	bdc2_LS_sign					=		(DEV_STA)((CAN1_RX0_BUF[T3_OFFSET+1]&0x40)>>6);		//闰秒标志

	
		if(bdc2_sta_synch==STA_OK)
			i += sprintf( (char*)(tbuf + i),"%s\n","IRIG-B2同步状态: 同步");
		else 
			i += sprintf( (char*)(tbuf + i),"%s\n","IRIG-B2同步状态: 失步");
			/*
		-------------------------1信号状态-----------------------------------------------------------------------------*/
		if(bdc2_sta_signal==STA_OK)	
			i += sprintf( (char*)(tbuf + i),"%s\n","IRIG-B2信号状态：正常");
		else 
			i += sprintf( (char*)(tbuf + i),"%s\n","IRIG-B2信号状态：异常");
		
		/*
		-------------------------3通道差值-----------------------------------------------------------------------------*/
		if(bdc2_dif_sign==STA_OK)		
			i += sprintf( (char*)(tbuf + i),"IRIG-B2通道差值: +%d秒%03d纳秒\n",bdc2_dif_s,bdc2_dif_ns);
		else
			i += sprintf( (char*)(tbuf + i),"IRIG-B2通道差值: -%d秒%03d纳秒\n",bdc2_dif_s,bdc2_dif_ns);
			/*
		-------------------------0闰秒状态-----------------------------------------------------------------------------*/
		i += sprintf( (char*)(tbuf + i),"闰秒预告: %02d\n闰秒标志: %02d\n",bdc2_LS_come,bdc2_LS_sign);	
			/*
		-------------------------1时间连续性状态-----------------------------------------------------------------------------*/
		if(bdc2_time_valid==STA_OK)	
		 i += sprintf( (char*)(tbuf + i),"%s\n","时间连续性状态：正常");
		else
			i += sprintf( (char*)(tbuf + i),"%s\n","时间连续性状态：异常");
		TEXT_SetFont(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01), &GUI_FontHZ32);
		TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_01),tbuf);
			}
			break;	
		default:
			WM_DefaultProc(pMsg);
			break;
	}
}


WM_HWIN CreateWindowPage1(void) 
{
	WM_HWIN hWin;
	hWin = GUI_CreateDialogBox(_aDialogCreatePage1, GUI_COUNTOF(_aDialogCreatePage1), _cbDialogPage1, hWinDevsta, 0, 0);
	return hWin;
}

WM_HWIN CreateWindowPage2(void) 
{
	WM_HWIN hWin;
	hWin = GUI_CreateDialogBox(_aDialogCreatePage1, GUI_COUNTOF(_aDialogCreatePage1), _cbDialogPage2, hWinDevsta, 0, 0);
	return hWin;
}

WM_HWIN CreateWindowPage3(void) 
{
	WM_HWIN hWin;
	hWin = GUI_CreateDialogBox(_aDialogCreatePage1, GUI_COUNTOF(_aDialogCreatePage1), _cbDialogPage3, hWinDevsta, 0, 0);
	return hWin;
}

WM_HWIN CreateWindowPage4(void) 
{
	WM_HWIN hWin;
	hWin = GUI_CreateDialogBox(_aDialogCreatePage1, GUI_COUNTOF(_aDialogCreatePage1), _cbDialogPage4, hWinDevsta, 0, 0);
	return hWin;
}

WM_HWIN CreateWindowPage5(void) 
{
	WM_HWIN hWin;
	hWin = GUI_CreateDialogBox(_aDialogCreatePage1, GUI_COUNTOF(_aDialogCreatePage1), _cbDialogPage5, hWinDevsta, 0, 0);
	return hWin;
}

WM_HWIN CreateWindowPage6(void) 
{
	WM_HWIN hWin;
	hWin = GUI_CreateDialogBox(_aDialogCreatePage1, GUI_COUNTOF(_aDialogCreatePage1), _cbDialogPage6, hWinDevsta, 0, 0);
	return hWin;
}

WM_HWIN CreateWindowPage7(void) 
{
	WM_HWIN hWin;
	hWin = GUI_CreateDialogBox(_aDialogCreatePage1, GUI_COUNTOF(_aDialogCreatePage1), _cbDialogPage7, hWinDevsta, 0, 0);
	return hWin;
}

static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { WINDOW_CreateIndirect, "DEVSTA", ID_WINDOW_0, 0, 0, 800, 480, 0, 0x0, 0 },
  { MULTIPAGE_CreateIndirect, "", ID_MULTIPAGE_0, 4, 60, 792, 400, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "装置状态", ID_TEXT_0, 12,	2, 150,	32, 0, 0x64, 0},
	{ TEXT_CreateIndirect, "", ID_TEXT_02, 180,	7, 200,	16, 0, 0x64, 0},
		{ TEXT_CreateIndirect, "", ID_TEXT_03, 180,	21, 200,	16, 0, 0x64, 0},
  // USER START (Optionally insert additional widgets)
  // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/

// USER START (Optionally insert additional static code)
// USER END

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
	WM_HWIN  hWinPage;
  WM_HWIN hItem;
  int     NCode;
  int     Id;
	static uint8_t    selpage;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
		
	case WM_PAINT:
		
			GUI_DrawGradientV(0, 39, 800, 480, GUI_LIGHTBLUE, GUI_BLUE);
		 
		  GUI_SetPenSize(1);
		  GUI_SetColor(GUI_COL_TITLE2);
		  GUI_DrawLine(170,8,170,34);
		  GUI_DrawLine(0,37,800,37);
		  GUI_SetColor(GUI_COL_TITLE3);
		  GUI_DrawLine(0,38,800,38);
		  
		 
		
			break;
		
  case WM_INIT_DIALOG:
    //
    // Initialization of 'DEVSTA'
    //
    hItem = pMsg->hWin;
    WINDOW_SetBkColor(hItem, 0x00808000);
	
	 
    //
    // Initialization of 'Multipage'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_MULTIPAGE_0);
	  MULTIPAGE_SetFont(hItem,GUI_FONT_D48);
	 // MULTIPAGE_SetFont(hItem,&GUI_FontHZ16);
	  hWinPage = CreateWindowPage1();
    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "1");
	  hWinPage = CreateWindowPage2();
    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "2");
	  hWinPage = CreateWindowPage3();
    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "3");
	  hWinPage = CreateWindowPage4();
    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "4");
	  hWinPage = CreateWindowPage5();
    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "5");
		hWinPage = CreateWindowPage6();
    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "6");
		hWinPage = CreateWindowPage7();
    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "7");
//		hWinPage = CreateWindowPage7();
//    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "PTP1");
//	  hWinPage = CreateWindowPage1();
//    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "电源状态");
//	  hWinPage = CreateWindowPage2();
//    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "频率源状态");
//	  hWinPage = CreateWindowPage3();
//    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "告警状态");
//	  hWinPage = CreateWindowPage4();
//    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "北斗状态");
//	  hWinPage = CreateWindowPage5();
//    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "GPS状态");
//		hWinPage = CreateWindowPage6();
//    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "IRIG-B1状态");
//		hWinPage = CreateWindowPage7();
//    MULTIPAGE_AddEmptyPage(hItem, hWinPage, "IRIG-B2状态");
   selpage = 0;
	 
							
		
    //
    // Initialization of 'Text'
    //
		
		WINDOW_SetBkColor(pMsg->hWin, GUI_COL_TITLE1);
				
				
				hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
				TEXT_SetTextColor(hItem, GUI_WHITE);
				TEXT_SetFont(hItem, &GUI_FontHZ32);
				TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
				
				hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_02);
				TEXT_SetTextColor(hItem, GUI_GRAY_11);
				TEXT_SetTextAlign(hItem,   GUI_TA_VCENTER);
				TEXT_SetFont(hItem, &GUI_FontHZ16);
				
					hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_03);
				TEXT_SetTextColor(hItem, GUI_GRAY_11);
				TEXT_SetTextAlign(hItem,   GUI_TA_VCENTER);
				TEXT_SetFont(hItem, &GUI_Font16_1);
		{
		static u8 TBUFF_LENTH = 20;
		  char tbuf[20]={0};
				sprintf((char*)tbuf,"%02d:%02d:%02d",DevHead.h,DevHead.m,DevHead.s);
					TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_03),(const char *)tbuf);
					memset(tbuf,0,TBUFF_LENTH);
					sprintf((char*)tbuf,"%04d年%02d月%02d日",DevHead.year,DevHead.month,DevHead.day);
					TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_02),(const char *)tbuf);
	}
		

		
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
    break;
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
    switch(Id) {
    case ID_MULTIPAGE_0: // Notifications sent by 'Multipage'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_MOVED_OUT:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_VALUE_CHANGED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
	case MSG_SetQIUT:
			if(WM_IsWindow(hWinDevsta))
			{	
				GUI_EndDialog(hWinDevsta, 0);hWin_msgto=hWinMainMenu;Menuapp();//返回到主菜单窗口
			}
			break;	
				
  case MSG_SetLEFT:
		  hItem = WM_GetDialogItem(pMsg->hWin, ID_MULTIPAGE_0); 
	    selpage = MULTIPAGE_GetSelection(hItem);
	     MULTIPAGE_SelectPage(hItem,(selpage+6)%7) ;
	     //MULTIPAGE_SelectPage(hItem,selpage) ;
		MULTIPAGE_SetFont(hItem,&GUI_FontHZ24);
		
		MULTIPAGE_SetText(hItem, "电源\n状态",0);
			MULTIPAGE_SetText(hItem, "频率源\n状态",1);
				MULTIPAGE_SetText(hItem, "告警\n状态",2);
				MULTIPAGE_SetText(hItem, "北斗\n状态",3);
					MULTIPAGE_SetText(hItem, "GPS\n状态",4);
						MULTIPAGE_SetText(hItem, "IRIG-B1\n状态",5);
							MULTIPAGE_SetText(hItem, "IRIG-B2\n状态",6);
			//GUI_SendKeyMsg(GUI_KEY_PGUP, 1);
			break;	
	case MSG_SetRIGHT:
			hItem = WM_GetDialogItem(pMsg->hWin, ID_MULTIPAGE_0); 
	    selpage = MULTIPAGE_GetSelection(hItem);
	     MULTIPAGE_SelectPage(hItem,(selpage+1)%7) ;
			break;			
 
	case MSG_PPSTICK:
	     
			 WM_InvalidateWindow(WM_GetDialogItem(pMsg->hWin, ID_MULTIPAGE_0) );
	{
		static u8 TBUFF_LENTH = 20;
		  char tbuf[20]={0};
				sprintf((char*)tbuf,"%02d:%02d:%02d",DevHead.h,DevHead.m,DevHead.s);
					TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_03),(const char *)tbuf);
					memset(tbuf,0,TBUFF_LENTH);
					sprintf((char*)tbuf,"%04d年%02d月%02d日",DevHead.year,DevHead.month,DevHead.day);
					TEXT_SetText(WM_GetDialogItem(pMsg->hWin, ID_TEXT_02),(const char *)tbuf);
	}
	    
	
	   
	  //WM_SendMessageNoPara(WM_GetDialogItem(pMsg->hWin, ID_MULTIPAGE_0), MSG_PPSTICK);
//			WM_GetClientRect(&Rect);
//		  GUI_SetBkColor(GUI_WHITE); //红色背景色
//      GUI_ClearRectEx(&Rect);    //清除 Rect 区域,既绘制红色区域
	
			break;		
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*/
void APP_Devsta(void) {

  hWinDevsta = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
	hWin_msgto=hWinDevsta;//进入到主菜单目录	
}

// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/

		
	

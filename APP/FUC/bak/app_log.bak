
#include "mainmenu.h"
#include "sys.h"
//函数数据结构
typedef struct 
{
	WM_CALLBACK * cb;
} APP_LIST_ITEM;
#define LOGLENTH   200;
uint8_t devlog[200*10];


/*****************************************************
APP_04-日志查询
*****************************************************/
static void REC_Handler_APP00(WM_MESSAGE * pMsg) 			
{
	WM_HWIN hItem ;
	uint16_t mask=0x1019; 			 //2.->>CAN_BUF报文类型
	uint8_t data;
	if(mask==((CAN1_RX1_STA&0xffff0000)>>16))	//收到的报文是对应槽，对应网口，对应类型的报文
	{
		myprintf("CAN_REC 日志查询/n");
		data  = CAN1_RX1_BUF[SETSYSMODE_OFFSET];
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_APP0);
		DROPDOWN_SetSel(hItem,data) ;
	}
	CAN1_RX1_STA=0;
}

void CAN_SEND_APP00(WM_MESSAGE * pMsg,uint8_t rtr) 			
{
	WM_HWIN hItem ;
	uint32_t send_id = 0x03100100;			//CANID
	uint8_t  msg[8]  = {0,}; 
	uint8_t  can_err;
	if(rtr)
	{
		myprintf("CAN_REQ :主从设置/n");
		can_err=CAN1_Send_REQ(send_id);
	}
	else
	{
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_APP0);
		msg[0]= DROPDOWN_GetSel(hItem);
		can_err=CAN1_Send_Msg(msg,send_id,8);
		myprintf("CAN_SEND:主从设置/n");
	}
	CAN_SHOW_ERR(can_err);
}






static void PAINTTITL_SETAPP(uint8_t line)
{
	int i;
	/*画标题栏*/
	GUI_SetColor(GUI_COL_TITLE1);
	GUI_FillRect(0, 0, 800, 36 );
	GUI_SetPenSize(1);
	GUI_SetColor(GUI_WHITE);
	GUI_DrawLine(170,8,170,34);
	GUI_DrawLine(0,37,800,37);
	GUI_SetColor(GUI_BLACK);
	GUI_DrawLine(0,38,800,38);
	/*画正文框*/
	GUI_SetColor(GUI_WHITE);
	GUI_FillRoundedRect(20,70,700,440,8);
	/*画装饰的线条*/
	GUI_SetColor(GUI_COL_WIN1);
	GUI_SetPenSize(3);
	GUI_DrawLine(80,112,600,112);
	GUI_SetPenSize(1);
	for (i = 1; i < line+1; i++) 
	 {
		GUI_DrawLine(80,112+YGAPS*i,600,112+YGAPS*i);
	 }
}

static void PAINTWIN_SETAPP(WM_MESSAGE * pMsg)
{

  WM_HWIN hItem = pMsg->hWin;
	WINDOW_SetBkColor(pMsg->hWin, GUI_COL_WIN1); //布置背景色
	//布置标题栏
	hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_APP00);
	TEXT_SetTextColor(hItem, GUI_WHITE);
	TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
	TEXT_SetFont(hItem, &GUI_FontHZ24);
		
	hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_APP01);
	TEXT_SetTextColor(hItem, GUI_GRAY_11);
	TEXT_SetTextAlign(hItem,   GUI_TA_VCENTER);
	TEXT_SetFont(hItem, &GUI_FontHZ16);
		
	hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_APP02);
	TEXT_SetTextColor(hItem, GUI_GRAY_11);
	TEXT_SetTextAlign(hItem,   GUI_TA_VCENTER);
	TEXT_SetFont(hItem, &GUI_Font13B_1);
}



static void _cbCallback03(WM_MESSAGE * pMsg) 
{
  WM_HWIN hDlg;
  WM_HWIN hItem;
	int i;
  hDlg = pMsg->hWin;
  switch (pMsg->MsgId) {
    case WM_PAINT:
			PAINTTITL_SETAPP(5);/*画标题栏和窗口*/
		  GUI_DrawLine(XPOS0+30,YPOS0-5,XPOS0+30,YPOS0+YGAPS*5);
      break;
    case WM_INIT_DIALOG:
      PAINTWIN_SETAPP(pMsg);//布置标题栏
			 //布置EDIT框
      for (i = 0; i < 5; i++) 
	    {
        hItem = WM_GetDialogItem(hDlg, ID_EDIT_APP00 + i);
        EDIT_SetDecMode(hItem, 0, -9999999, 9999999, 0, GUI_EDIT_SIGNED);
      }
		  CAN_SEND_APP03(pMsg,1); //请求配置
      break;
 		/************************************************************
			按键特殊处理
			*/	
		case MSG_FOUCE:
		case WM_PRE_PAINT:	
			hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_APP00);  
			WM_SetFocus (hItem);
			break;
		/************************************************************
			按键消息常规处理
			*/	
		case MSG_SetLEFT:
			GUI_SendKeyMsg(GUI_KEY_LEFT, 1);
		  break;
		case MSG_SetRIGHT:
			GUI_SendKeyMsg(GUI_KEY_RIGHT, 1);
		  break;
		case MSG_SetUP:
			GUI_SendKeyMsg(GUI_KEY_BACKTAB, 1);
		  break;
		case MSG_SetDOWM:
			GUI_SendKeyMsg(GUI_KEY_TAB, 1);
		  break;
	  case MSG_SetInc:		
			GUI_SendKeyMsg(GUI_KEY_UP, 1);		
	 		break;
	  case MSG_SetDec:			
			GUI_SendKeyMsg(GUI_KEY_DOWN, 1);	
			break;
		case MSG_SetENTER:
			Password_Verify();
		  break;
		case MSG_SetQIUT:
			if(WM_IsWindow(hWinSetapp))
			{	
				 GUI_EndDialog(hDlg, 0);hWin_msgto=hWinMenuSet;MenuSet();//返回到设置菜单窗口
			}
			break;	
		/************************************************************
			设置功能的实现
			*/	
		case MSG_VerifyOK:
			{
				CAN_SEND_APP03(pMsg,0);
			}
			break;
		case WM_TIMER:
			{
			 REC_Handler_APP03(pMsg);
			}
			WM_RestartTimer(pMsg->Data.v, 20);	
			break;	
		
    case WM_NOTIFY_PARENT:
      break;
    default:
      WM_DefaultProc(pMsg);
  }
	
}















